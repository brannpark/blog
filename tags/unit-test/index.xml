<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unit Test on 개발지식저장소</title>
    <link>http://brannpark.github.io/blog/tags/unit-test/</link>
    <description>Recent content in Unit Test on 개발지식저장소</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Wed, 15 Jun 2016 19:20:21 +0900</lastBuildDate>
    <atom:link href="http://brannpark.github.io/blog/tags/unit-test/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Presenter First</title>
      <link>http://brannpark.github.io/blog/posts/20160615_presenter_first/</link>
      <pubDate>Wed, 15 Jun 2016 19:20:21 +0900</pubDate>
      
      <guid>http://brannpark.github.io/blog/posts/20160615_presenter_first/</guid>
      <description>

&lt;h1 id=&#34;presenter-first-tdd-for-large-complex-applications-with-graphical-user-interfaces:3945feba508775401f06cd3bcd843e68&#34;&gt;Presenter First: TDD for Large, Complex Applications with Graphical User Interfaces&lt;/h1&gt;

&lt;p&gt;Michael Marsiglia, Brian Harleton, Carl Erickson&lt;/p&gt;

&lt;p&gt;번역: Brann Park
원문: &lt;a href=&#34;https://atomicobject.com/uploadedImages/archive/files/PF_March2005.pdf&#34;&gt;https://atomicobject.com/uploadedImages/archive/files/PF_March2005.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;motivation:3945feba508775401f06cd3bcd843e68&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;그래픽 사용자 인터페이스는 고통스럽다! 우리 모두가 다 겪어보았다. 그것은 처음 대충 훑어보았을 때는 매우 쉬웠다. 어떻게 우리는 그런 대규모의 혼란스런것들을 빠르게 만들어왔는가? 왜 우리의 디자인에 작은 변화를 가하는 것이 그리도 고통스러운가? 기능에 대해 가장 무지한 시점에, 우리는 어떻게 끊임없이 거대하고 시간이 많이드는 코드의 조각들을 만드어내는 함정에 빠지게 되었는가? 어떻게 우리는 기능 중심 개발의 골로부터 잘못된 길로 들어서게 되었는가? 우리의 스트레스와 고통스러움을 분명히 경감시켜줄 수 있는 유닛 테스트들을 작성하는것이 왜 어려운가? 고객에게 커스텀 다이얼로그 내부의 작은 변화를 가하는것이 한 주(week)의 시간이 소요될 것이라는 것을 어떻게 이야기 할 것인가?&lt;/p&gt;

&lt;p&gt;그 첫 단계는 비지니스 로직과 인터페이스를 분리하는 것이다. Model-View-Presenter 패턴의 용어를 사용하는 것은, Model이 Presenter와 View로 부터 격리된다는 것이다. 이런 테크닉을 이용하여 우리는 비지니스 로직(model)을 유닛 테스트할 수 있고, TDD 원칙을 따를 수 있게된다. 그러나 어플리케이션 흐름, 또는 GUI내에 존재하는 기능을 그대로 내버려두기 때문에 이러한 접근만으로는 충분하지 않다. 자동화 시스템 레벨의 테스트 프레임워크를 이용함으로써 GUI기능을 테스트 할 수 있다. 우리의 경험상, 이러한 테스트 패키지를 만들고 유지보수 하는것은 많은 비용이 든다.&lt;/p&gt;

&lt;p&gt;Michael Feathers의 Humble Dialog Box 는 그래픽 유저 인터페이스를 가진 어플리케이션에서, View로부터 모든 기능과 로직을 제거함으로써 테스트성을 향상시켰다. 이 접근은 Smart Object를 만들고, Presenter를 View로부터 Model로 이동시킨다. 이 Smart Object를 관리하는 것은 사용자 인터페이스의 흐름과 로직이 어플리케이션의 비지니스 로직에 묶이게 되기에 이상적이지 못하다. 어플리케이션 흐름에 대한 모든 변화는 직접적으로 비지니스 로직에 영향을 미치고 반대로 비지니스 로직의 변화 또한 어플리케이션 흐름에 영향을 끼치게 된다. 이러한 커플링 문제때문에 요구사항의 변화는 다루기가 쉽지 않다.&lt;/p&gt;

&lt;p&gt;이상적으로 우리는 비용 효율적인 관점에서, 사용자 우선순위의, 스토리 베이스의, 테스트 주도의 개발이라는 Extreme Programming practices를 따를수 있도록 해주는 접근법을 원한다. 이러한 목표를 달성하기 위해 TDD 개발 프로세스의 도입이 필요하다. 우리는 clean하고, robust하고, decouped하고, 완전히 테스트된 코드를 위해 노력해야 한다. 우리는 요구사항의 변화를 쉽고 저렴하게 만들 코드와 프로세스를 원한다.&lt;/p&gt;

&lt;p&gt;Presenter First는 사용자 그래픽 인터페이스를 가진 복잡한 어플리케이션들과 어플리케이션 패키지들을 만들어내는 문제를 다룬다. 그것은 끊임없이 변화하는 인터페이스로 부터 개발을 분리시키고 기능의 문제에 집중하는데에 도움을 준다. 사용자 스토리들은 일반적으로 기능 중심적이기 때문에, Presenter First는 우리가 버튼, 슬라이더, 체크박스들이 아닌, 기능의 관점에서 생각할 수 있도록 해준다. 또한 Presenter First는 테스트된, 유지보수 가능한 코드를 제공하고, 어플리케이션의 기능 구현 및 테스트를 위한 프로세스를 제공해준다.&lt;/p&gt;

&lt;h2 id=&#34;presenter-first:3945feba508775401f06cd3bcd843e68&#34;&gt;Presenter First&lt;/h2&gt;

&lt;p&gt;Presenter First는 프로세스와 패턴의 결합니다. 패턴은 MVP 디자인 패턴의 변형이다. Presenter First의 프로세스는 MVP를 이용해 어떻게 어플리케이션이 만들어지고 테스트 되는지를 결정한다. 그 결과는 테스트 주도 개발 효과의 경계선을 고객에의해 설명되고 우선순위되어진 시스템 기능을 포함하도록 확장해낸다.&lt;/p&gt;

&lt;p&gt;Acceptance test들은 고객의 관점에서 시스템의 기능성을 검증한다. 고객의 관점이라는 것이 어플리케이션의 인터페이스를 포함하기 때문에 acceptance test 를 자동화하는 접근은 인터페이즈의 자동화를 요구한다. 이런 접근은 복잡하고 비싸며, 특히 인터페이스가 그래픽인 경우 더욱 그러하다. Extreme Programming 커뮤니티의 일반적인 통념으로 보이는 하나의 대안은, GUI를 가능한 얇은 레이어 형태로 만들고 그 바로 아래에서 레이어를 테스트하는 것이다. Presenter First는 이러한 일반적 통념의 구체적인 실현을 제공해준다.&lt;/p&gt;

&lt;p&gt;MVP 패턴은 Taligent에 의해 처음 소개되고, Dolphin에 의해 널리 쓰이고, 가장 최근에는 Fowler 에 의해 소개되어진 SmallTalk의 전통적 MVC 패턴으로 부터 유래되었다. MVP의 의도는 Presentation 에서 비지니스 룰을 분리시키는데에 있지만, 더 나아가 프리젠테이션의 매커니즘으로부터 행위를 분리시키는데에 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Model&lt;/strong&gt; 어플리케이션의 비지니스 로직과 데이터. 고객에게 보이지않으며 관련되어있지 않다.
&lt;strong&gt;View&lt;/strong&gt; 어플리케이션의 인터페이스. 고객에게 있어서는, View가 어플리케이션이다. 고객 스토리는 View에 무언가를 하고 View에서 결과를 보는 관점에서의 기능성을 대해 설명한다. 그 View는 그러므로 프로젝트 전반에 걸쳐 가장 높은 변화율을 가지게 된다. 이러한 변화로부터 디커플링 시키는 것이 Presenter First의 가장 주요한 목적이다.
&lt;strong&gt;Presenter&lt;/strong&gt; Presenter는 Model과 View가 서로 상호작용할 수 있도록 허용해주는 커스텀 로직이다. 이것은 MVP 각각의 요소들의 기능성 또는 흐름을 나타낸다. 고객 스토리들이나 요구사항들은 Presenter안의 기능성과 일치한다.&lt;/p&gt;

&lt;p&gt;Presenter First에서 사용되는 MVP의 변형은 MVP 각각의 요소들 내에서의 커뮤니케이션 패턴들에 영향을 미친다. 본래의 MVP 패턴은 Model이 직접적으로 View 와 커뮤니케이션하는 것을 허용한다. 그러나 Presenter First는 모든 커뮤니케이션이 Presenter를 통해서 이뤄지는 것을 요구한다. 이런 제약은 Model과 View가 서로 격리되는 것을 보장한다. 그리고 MVP 각각의 요소들에 대한 테스트성을 크게 증대시킨다.&lt;/p&gt;

&lt;p&gt;Presenter First의 프로세스 측면은 시간을 지남에 따라 어떻게 개발이 구성되는지, 그리고 개발되는 동안 어플리케이션이 어떻게 테스트되는지에 대한 질문을 던진다. 모든 어플리케이션 개발 노고에서 직면하는 첫번째 질문은 어디에서 시작할 것인가 이다. MVP에 기반한 어플리케이션에게는 다음과 같은 세가지 답변이 가능하다.&lt;/p&gt;

&lt;p&gt;Model에서 시작하는 것은 전통적인 소프트웨어 개발의 &amp;ldquo;infrastructure first&amp;rdquo; 접근의 형태이다. 이 접근의 단점은, 무엇이 필요한지 확실하게 알지못한 채 Model을 만든다는 점과, 초기 개발 시 사용자에게 보이지 않는 것들에 대해 초점을 맞춘다는 것을 포함한다. Model은 테스트하기 쉬워야 하며, 테스트 주도 방식에서 개발하기 쉬워야 한다. 고객으로부터의 기능 요청에 의해 Model에 대한 요구조건들이 명확해질 때까지 작업을 연기하는 것이 핵심이다.&lt;/p&gt;

&lt;p&gt;View에서 시작하는 것은 고객 우선순위 기능 주도 개발 프로세스에서 MVP를 사용할 때 꽤 논리적인듯이 보인다. 이 접근의 논리는 매력적이다. 고객 스토리들은 View에서 일어나는 액션들과 View에서 보여지는 결과, 그들이 어플리케이션을 사용하는데 있어 어떤 인터페이스들이 필요한지에 대한 피드백, 그리고 최소화된 Model(infrastructure)의 중요성을  이야기한다. 불행하게도 View First는 쉽게 만들고 쉽게 비싼 실수를 야기한다.&lt;/p&gt;

&lt;p&gt;View First 개발은 몇몇 약점들을 가지고 있다. View는 고객으로부터의 어떤 확고한 생각들, 특정한 것들을 남겨두는 것에 대한 망설임, 그리고 요구사항을 바꾸는 비율을 높게 만들어내는데 있어 특별하다. 우리의 경험상, 사용자 스토리들을 거의 디테일한 인터페이스들을 명시하지 않는다. 그러나 좀 더 일반적인 어플리케이션 기능을 설명한다. 이렇게 남아있는 모호함은 고객에 의해 인터페이스를 퇴짜놓도록 함으로써 수시간을 단지 인터페이스를 만드는데만 소모하게 할 수 있다. 게다가 View에 초점을 맞추는 것은 View를 비지니스 로직과 함께 두텁게 만드는 위험을 증대시키는 경향이 있다. 마지막으로 인터페이스 테스트의 어려움은, 바람직한 테스트 주도 개발의 사이클을 허물어 버린다.&lt;/p&gt;

&lt;p&gt;우리의 경험에서, 최고의 대안은 Presenter First이다. Presenter에서 시작하고 그 주위에서 개발을 조직함으로써 사용자 스토리로부터 테스트 주도 개발 실행을 따르며 어플리케이션이 만들어질 수 있을 것이다. Presenter에서의 유닛 테스트들은 작성하고 유지하는데 경제적이며, 특정 인터페이스 요소들에 묶이지 않은 채 어플리케이션 기능의 정상 동작을 확인한다. Presenter First로 개발함으로써, 개발자의 관심을 고객 기능에 두면서도 동시에 Model과 View에 대한 최소화된 완전한 명세들이 만들어지게 된다.&lt;/p&gt;

&lt;p&gt;Presenter First는 MVP의 구현 옵션임에도, Model과 View 모두의 인터페이스를 필요로한다. Presenter와의 커뮤니케이션은 Presenter로 부터 Model과 View 모두가 decoupling 된 채 이벤트 서브시스템을 통해서 처리된다.&lt;/p&gt;

&lt;h3 id=&#34;how-it-works:3945feba508775401f06cd3bcd843e68&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Presenter First 의 강점은 접근방식의 단순하고 구체적인 모습이다. 개발은 다음과 같이 진행된다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;생성자에서 Model 인터페이스와 View 인터페이스를 취하는 Stub Presenter 클래스를 만든다.&lt;/li&gt;
&lt;li&gt;Model, View의 인터페이스를 만족시키는 Mock 테스트 객체들을 만든다.&lt;/li&gt;
&lt;li&gt;모든 사용자 스토리들에 대해서

&lt;ul&gt;
&lt;li&gt;3.1 우선순위화 된 사용자 스토리를 선택한다.&lt;/li&gt;
&lt;li&gt;3.2 스토리의 View에 대한 영향력을 분석한다.&lt;/li&gt;
&lt;li&gt;3.3 스토리에 대한 View 인터페이스를 추가한다.&lt;/li&gt;
&lt;li&gt;3.4 스토리의 모델에 대한 영향력을 분석한다.&lt;/li&gt;
&lt;li&gt;3.5 스토리에 대한 Model 인터페이스를 추가한다.&lt;/li&gt;
&lt;li&gt;3.6 Mock 객체들에서, 호출되고 데이터들을 리턴 할 인터페이스 메서드들을 구현한다.&lt;/li&gt;
&lt;li&gt;3.7 끊어낼 수 있는 모든 요소들에 대해서(TDD 반복)

&lt;ul&gt;
&lt;li&gt;3.7.1 Do for each test

&lt;ul&gt;
&lt;li&gt;3.7.1.1 View 또는 Model에 대한 액션 또는 이벤트를 통해 앱을 활동시키는 Presenter에 대한 테스트를 작성하라.&lt;/li&gt;
&lt;li&gt;3.7.1.2 Model의 상태와 View의 상태에 대한 Assertion을 만들어라.&lt;/li&gt;
&lt;li&gt;3.7.1.3 Presenter 내의 private method들을 구현하라.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3.8 이 스토리의 View 인터페이스를 만족하는 최소의 사용자 인터페이스 구현체를 만들어라.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Presenter First 프로세스의 바깥 루프는 Model과 View 인터페이스의 빈번한 리팩토링들을 요구한다. 그러나 이러한 리팩토링들은, 해당 시점에서는 오직 이 인터페이스들에 대한 Mock 구현체밖에 존재하지 않기 때문에 비싼 비용이 들지 않는다.&lt;/p&gt;

&lt;p&gt;Presenter First의 한가지 매우 훌륭한 결과물은, Presenter가 현시점의 모든 고객 요구사항들을 코드화 했을 때, Model과 View의 인터페이스들은 그들 각자의 구현에 대한 최소의, 완전한 명세서가 된다는 것이다. 이 점에서 보면, 어플리케이션을 완성한다라는 것은 표준 TDD 실행에 따라 모델을 구현하고, 고객의 요구와 View 인터페이스를 총족시키기 위한 View를 만들어내는 것이 된다.&lt;/p&gt;

&lt;p&gt;고객으로부터 피드백을 얻기 위해, 우리는 일반적으로 최소한의 시간과 노력으로 상당히 단순한 사용자 인터페이스를 만들어낸다. 고객은 아마도 그런 인터페이스가 유능한 전문가에 의해 새롭게 디자인되야 한다거나, 마케팅적으로 디자인 되어야 한다거나, 혹은 이미 목적에 맞게 충분히 괜찮은지를 판단할 것이다. 그러는 동안에, 어플리케이션의 기능성은 테스트되고, 인터페이스 코드의 대해서는 오직 적은 노력만을 요구하며, 새로운 인터페이스들은 View 인터페이스를 만족시키는 미래의 어떤 순간에 즉시 개발되어질 것이다.&lt;/p&gt;

&lt;p&gt;실제의 View를 테스트하는 것은, 자동화를 위한 툴들과 예산이 허락된다면 테스트 자동화를 구축할 수 있다. 만약 그렇지 않을 경우에는 최종적으로 시스템 수동 테스트 단계를 진행하게 될 것이다. View는 Presenter가 처리할 적절한 타입 이벤트들을 호출하는 메서드 수 보다는 조금 더 많은 메서드 수를 가진 채 매우 얇게 되어있다. GUI 위젯이 동작하는(버튼 클릭 등등) 내부를 생각해보자. 그 View에 대한 유닛 테스트는 주로 스크린내에 위젯이 올바르게 놓여있는가, 적절한 이벤트 타입을 발생시키도록 프로그래밍 되어있는지를 확실히 하려는 것이다.&lt;/p&gt;

&lt;p&gt;Presenter는 의도적으로 비상태성이고 public 메서드가 없다. Presenter의 유닛 테스트들은 어플리케이션의 &amp;ldquo;wiring&amp;rdquo;이 Presenter의 private 메서드들이 표현하는대로 적절히 구현되었는지를 명시적으로 테스트한다. 어플리케이션의 기능은 Presenter에 의해 View와 Model 사이에서 조정된다. 이는 어플리케이션 행동에 대한 Presenter, Presenter의 유닛 테스트 묶음을 만들고, 응집력(cohesive)있고 집중화된(centralized) 문서 소스를 만들어준다. 실제로는 Presenter와 테스트들은 실재하는 실행가능한 어플리케이션 명세서다. 우리의 경험은, 어플리케이션 요구사항들의 변화와 추가는 종종 Presenter 에 의해 단독으로 처리(사용자 인터페이스의 변경이 아닐때)될 수 있다는 것이다. Presenter는 철저하게 유닛 테스트 커버리지를 가지기에, 이런 작업은, 고객의 관점에서 나오는 어플리케이션의 단순 변경과 추가 작업과 같은 것을 서포트 하기 위한 개발자의 수고를 단순하게 만들어, 빠르고 자신감있는 처리가 되어질 수 있도록 한다.&lt;/p&gt;

&lt;p&gt;Presenter와의 커뮤니케이션은 Model과 View를 Presenter에 느슨하게 연결하기 위한 이벤트 서브시스템을 사용함으로써 가능해진다. 가장 흔한 케이스는, Model 트리거 이벤트도 또한 가능하겠지만, View의 이벤트를 Presenter가 소비하도록 발생시키는 것이다. View가 Presenter와의 커뮤니케이션에 이벤트를 사용하는것은 View의 로직을 매우 얇게 유지시킨다. View는 모든 이벤트 처리를 Presenter에 위임시킨다. 이런 디자인은 View 자체의 행동성에 대해 테스트할 것이 거의 없는 &amp;ldquo;얇은 GUI&amp;rdquo;를 만들어낸다. Presenter와의 커뮤니케이션에 이벤트를 사용하는 것은, 컴포넌트의 패키지를 분리하고, 컴파일 의존성들을 줄이고, 동일한 View가 다른 행동성을 가진 Presenter들에 연결되어질 수 있도록 한다.&lt;/p&gt;

&lt;p&gt;얇은 View의 결과, View 인터페이스는 Primitive 타입만을 파라미터로 취한다. 복잡한 타입들을 View에 전달하는 것은 View에서 Processing을 야기하고 View 층을 두텁게 하고, 유닛 테스트가 필요하도록 만든다.&lt;/p&gt;

&lt;h3 id=&#34;example-use-of-presenter-first:3945feba508775401f06cd3bcd843e68&#34;&gt;Example use of Presenter First&lt;/h3&gt;

&lt;h2 id=&#34;benefits-of-presenter-first:3945feba508775401f06cd3bcd843e68&#34;&gt;Benefits of Presenter First&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>